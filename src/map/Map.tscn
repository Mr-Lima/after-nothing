[gd_scene load_steps=8 format=2]

[ext_resource path="res://src/map/Gadrient.gd" type="Script" id=1]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

// Our gradient texture.
uniform sampler2D colormap : hint_black;
// Stores the minimum and maximum values generated by the noise texture.
uniform vec2 noise_minmax = vec2(0.0, 1.0);

void fragment() {
	// Sample the node's texture and extract the red channel from the image.
	float noise = texture(TEXTURE, UV).r;
	// Convert the noise value to a horizontal position to sample the gradient texture.
	vec2 uv_noise = vec2(noise, 0);
	// Replace greyscale values from the input texture by a color from the gradient texture.
	COLOR = texture(colormap, uv_noise);
}"

[sub_resource type="Gradient" id=2]
offsets = PoolRealArray( 0, 0.664516, 1 )
colors = PoolColorArray( 0, 0, 0, 1, 0.722656, 0.811493, 1, 1, 0.953125, 0.953125, 0.953125, 1 )

[sub_resource type="GradientTexture" id=3]
gradient = SubResource( 2 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/noise_minmax = Vector2( 0, 1 )
shader_param/colormap = SubResource( 3 )

[sub_resource type="OpenSimplexNoise" id=5]

[sub_resource type="NoiseTexture" id=6]
noise = SubResource( 5 )

[node name="Map" type="Control"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HeightMap" type="TextureRect" parent="."]
material = SubResource( 4 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = SubResource( 6 )
stretch_mode = 1
script = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}
colormap = SubResource( 3 )
